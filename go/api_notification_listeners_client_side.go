/*
 * Service Catalog Management
 *
 * ## TMF API Reference: TMF633 - Service Catalog Management   Version 4.0   The Service Catalog API is one of Catalog Management API Family. Service Catalog API goal is to provide a catalog of services.  Service Catalog API performs the following operations on the resource : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity (for administration purposes) - Manage notification of events. .  Copyright Â© TM Forum 2020. All Rights Reserved.
 *
 * API version: 4.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package tmf633

import (
	"encoding/json"
	"net/http"
	"strings"
	// "github.com/gorilla/mux"
)

// NotificationListenersClientSideApiController binds http requests to an api service and writes the service results to the http response
type NotificationListenersClientSideApiController struct {
	service      NotificationListenersClientSideApiServicer
	errorHandler ErrorHandler
}

// NotificationListenersClientSideApiOption for how the controller is set up.
type NotificationListenersClientSideApiOption func(*NotificationListenersClientSideApiController)

// WithNotificationListenersClientSideApiErrorHandler inject ErrorHandler into controller
func WithNotificationListenersClientSideApiErrorHandler(h ErrorHandler) NotificationListenersClientSideApiOption {
	return func(c *NotificationListenersClientSideApiController) {
		c.errorHandler = h
	}
}

// NewNotificationListenersClientSideApiController creates a default api controller
func NewNotificationListenersClientSideApiController(s NotificationListenersClientSideApiServicer, opts ...NotificationListenersClientSideApiOption) Router {
	controller := &NotificationListenersClientSideApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the NotificationListenersClientSideApiController
func (c *NotificationListenersClientSideApiController) Routes() Routes {
	return Routes{
		{
			"ListenToServiceCandidateChangeEvent",
			strings.ToUpper("Post"),
			"/tmf-api/serviceCatalogManagement/v4/listener/serviceCandidateChangeEvent",
			c.ListenToServiceCandidateChangeEvent,
		},
		{
			"ListenToServiceCandidateCreateEvent",
			strings.ToUpper("Post"),
			"/tmf-api/serviceCatalogManagement/v4/listener/serviceCandidateCreateEvent",
			c.ListenToServiceCandidateCreateEvent,
		},
		{
			"ListenToServiceCandidateDeleteEvent",
			strings.ToUpper("Post"),
			"/tmf-api/serviceCatalogManagement/v4/listener/serviceCandidateDeleteEvent",
			c.ListenToServiceCandidateDeleteEvent,
		},
		{
			"ListenToServiceCatalogBatchEvent",
			strings.ToUpper("Post"),
			"/tmf-api/serviceCatalogManagement/v4/listener/serviceCatalogBatchEvent",
			c.ListenToServiceCatalogBatchEvent,
		},
		{
			"ListenToServiceCatalogChangeEvent",
			strings.ToUpper("Post"),
			"/tmf-api/serviceCatalogManagement/v4/listener/serviceCatalogChangeEvent",
			c.ListenToServiceCatalogChangeEvent,
		},
		{
			"ListenToServiceCatalogCreateEvent",
			strings.ToUpper("Post"),
			"/tmf-api/serviceCatalogManagement/v4/listener/serviceCatalogCreateEvent",
			c.ListenToServiceCatalogCreateEvent,
		},
		{
			"ListenToServiceCatalogDeleteEvent",
			strings.ToUpper("Post"),
			"/tmf-api/serviceCatalogManagement/v4/listener/serviceCatalogDeleteEvent",
			c.ListenToServiceCatalogDeleteEvent,
		},
		{
			"ListenToServiceCategoryChangeEvent",
			strings.ToUpper("Post"),
			"/tmf-api/serviceCatalogManagement/v4/listener/serviceCategoryChangeEvent",
			c.ListenToServiceCategoryChangeEvent,
		},
		{
			"ListenToServiceCategoryCreateEvent",
			strings.ToUpper("Post"),
			"/tmf-api/serviceCatalogManagement/v4/listener/serviceCategoryCreateEvent",
			c.ListenToServiceCategoryCreateEvent,
		},
		{
			"ListenToServiceCategoryDeleteEvent",
			strings.ToUpper("Post"),
			"/tmf-api/serviceCatalogManagement/v4/listener/serviceCategoryDeleteEvent",
			c.ListenToServiceCategoryDeleteEvent,
		},
		{
			"ListenToServiceSpecificationChangeEvent",
			strings.ToUpper("Post"),
			"/tmf-api/serviceCatalogManagement/v4/listener/serviceSpecificationChangeEvent",
			c.ListenToServiceSpecificationChangeEvent,
		},
		{
			"ListenToServiceSpecificationCreateEvent",
			strings.ToUpper("Post"),
			"/tmf-api/serviceCatalogManagement/v4/listener/serviceSpecificationCreateEvent",
			c.ListenToServiceSpecificationCreateEvent,
		},
		{
			"ListenToServiceSpecificationDeleteEvent",
			strings.ToUpper("Post"),
			"/tmf-api/serviceCatalogManagement/v4/listener/serviceSpecificationDeleteEvent",
			c.ListenToServiceSpecificationDeleteEvent,
		},
	}
}

// ListenToServiceCandidateChangeEvent - Client listener for entity ServiceCandidateChangeEvent
func (c *NotificationListenersClientSideApiController) ListenToServiceCandidateChangeEvent(w http.ResponseWriter, r *http.Request) {
	dataParam := ServiceCandidateChangeEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceCandidateChangeEventRequired(dataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ListenToServiceCandidateChangeEvent(r.Context(), dataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListenToServiceCandidateCreateEvent - Client listener for entity ServiceCandidateCreateEvent
func (c *NotificationListenersClientSideApiController) ListenToServiceCandidateCreateEvent(w http.ResponseWriter, r *http.Request) {
	dataParam := ServiceCandidateCreateEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceCandidateCreateEventRequired(dataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ListenToServiceCandidateCreateEvent(r.Context(), dataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListenToServiceCandidateDeleteEvent - Client listener for entity ServiceCandidateDeleteEvent
func (c *NotificationListenersClientSideApiController) ListenToServiceCandidateDeleteEvent(w http.ResponseWriter, r *http.Request) {
	dataParam := ServiceCandidateDeleteEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceCandidateDeleteEventRequired(dataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ListenToServiceCandidateDeleteEvent(r.Context(), dataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListenToServiceCatalogBatchEvent - Client listener for entity ServiceCatalogBatchEvent
func (c *NotificationListenersClientSideApiController) ListenToServiceCatalogBatchEvent(w http.ResponseWriter, r *http.Request) {
	dataParam := ServiceCatalogBatchEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceCatalogBatchEventRequired(dataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ListenToServiceCatalogBatchEvent(r.Context(), dataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListenToServiceCatalogChangeEvent - Client listener for entity ServiceCatalogChangeEvent
func (c *NotificationListenersClientSideApiController) ListenToServiceCatalogChangeEvent(w http.ResponseWriter, r *http.Request) {
	dataParam := ServiceCatalogChangeEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceCatalogChangeEventRequired(dataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ListenToServiceCatalogChangeEvent(r.Context(), dataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListenToServiceCatalogCreateEvent - Client listener for entity ServiceCatalogCreateEvent
func (c *NotificationListenersClientSideApiController) ListenToServiceCatalogCreateEvent(w http.ResponseWriter, r *http.Request) {
	dataParam := ServiceCatalogCreateEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceCatalogCreateEventRequired(dataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ListenToServiceCatalogCreateEvent(r.Context(), dataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListenToServiceCatalogDeleteEvent - Client listener for entity ServiceCatalogDeleteEvent
func (c *NotificationListenersClientSideApiController) ListenToServiceCatalogDeleteEvent(w http.ResponseWriter, r *http.Request) {
	dataParam := ServiceCatalogDeleteEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceCatalogDeleteEventRequired(dataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ListenToServiceCatalogDeleteEvent(r.Context(), dataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListenToServiceCategoryChangeEvent - Client listener for entity ServiceCategoryChangeEvent
func (c *NotificationListenersClientSideApiController) ListenToServiceCategoryChangeEvent(w http.ResponseWriter, r *http.Request) {
	dataParam := ServiceCategoryChangeEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceCategoryChangeEventRequired(dataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ListenToServiceCategoryChangeEvent(r.Context(), dataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListenToServiceCategoryCreateEvent - Client listener for entity ServiceCategoryCreateEvent
func (c *NotificationListenersClientSideApiController) ListenToServiceCategoryCreateEvent(w http.ResponseWriter, r *http.Request) {
	dataParam := ServiceCategoryCreateEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceCategoryCreateEventRequired(dataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ListenToServiceCategoryCreateEvent(r.Context(), dataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListenToServiceCategoryDeleteEvent - Client listener for entity ServiceCategoryDeleteEvent
func (c *NotificationListenersClientSideApiController) ListenToServiceCategoryDeleteEvent(w http.ResponseWriter, r *http.Request) {
	dataParam := ServiceCategoryDeleteEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceCategoryDeleteEventRequired(dataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ListenToServiceCategoryDeleteEvent(r.Context(), dataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListenToServiceSpecificationChangeEvent - Client listener for entity ServiceSpecificationChangeEvent
func (c *NotificationListenersClientSideApiController) ListenToServiceSpecificationChangeEvent(w http.ResponseWriter, r *http.Request) {
	dataParam := ServiceSpecificationChangeEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceSpecificationChangeEventRequired(dataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ListenToServiceSpecificationChangeEvent(r.Context(), dataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListenToServiceSpecificationCreateEvent - Client listener for entity ServiceSpecificationCreateEvent
func (c *NotificationListenersClientSideApiController) ListenToServiceSpecificationCreateEvent(w http.ResponseWriter, r *http.Request) {
	dataParam := ServiceSpecificationCreateEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceSpecificationCreateEventRequired(dataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ListenToServiceSpecificationCreateEvent(r.Context(), dataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListenToServiceSpecificationDeleteEvent - Client listener for entity ServiceSpecificationDeleteEvent
func (c *NotificationListenersClientSideApiController) ListenToServiceSpecificationDeleteEvent(w http.ResponseWriter, r *http.Request) {
	dataParam := ServiceSpecificationDeleteEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceSpecificationDeleteEventRequired(dataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ListenToServiceSpecificationDeleteEvent(r.Context(), dataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
