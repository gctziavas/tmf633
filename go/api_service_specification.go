/*
 * Service Catalog Management
 *
 * ## TMF API Reference: TMF633 - Service Catalog Management   Version 4.0   The Service Catalog API is one of Catalog Management API Family. Service Catalog API goal is to provide a catalog of services.  Service Catalog API performs the following operations on the resource : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity (for administration purposes) - Manage notification of events. .  Copyright Â© TM Forum 2020. All Rights Reserved. 
 *
 * API version: 4.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package tmf633

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ServiceSpecificationApiController binds http requests to an api service and writes the service results to the http response
type ServiceSpecificationApiController struct {
	service ServiceSpecificationApiServicer
	errorHandler ErrorHandler
}

// ServiceSpecificationApiOption for how the controller is set up.
type ServiceSpecificationApiOption func(*ServiceSpecificationApiController)

// WithServiceSpecificationApiErrorHandler inject ErrorHandler into controller
func WithServiceSpecificationApiErrorHandler(h ErrorHandler) ServiceSpecificationApiOption {
	return func(c *ServiceSpecificationApiController) {
		c.errorHandler = h
	}
}

// NewServiceSpecificationApiController creates a default api controller
func NewServiceSpecificationApiController(s ServiceSpecificationApiServicer, opts ...ServiceSpecificationApiOption) Router {
	controller := &ServiceSpecificationApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ServiceSpecificationApiController
func (c *ServiceSpecificationApiController) Routes() Routes {
	return Routes{ 
		{
			"CreateServiceSpecification",
			strings.ToUpper("Post"),
			"/tmf-api/serviceCatalogManagement/v4/serviceSpecification",
			c.CreateServiceSpecification,
		},
		{
			"DeleteServiceSpecification",
			strings.ToUpper("Delete"),
			"/tmf-api/serviceCatalogManagement/v4/serviceSpecification/{id}",
			c.DeleteServiceSpecification,
		},
		{
			"ListServiceSpecification",
			strings.ToUpper("Get"),
			"/tmf-api/serviceCatalogManagement/v4/serviceSpecification",
			c.ListServiceSpecification,
		},
		{
			"PatchServiceSpecification",
			strings.ToUpper("Patch"),
			"/tmf-api/serviceCatalogManagement/v4/serviceSpecification/{id}",
			c.PatchServiceSpecification,
		},
		{
			"RetrieveServiceSpecification",
			strings.ToUpper("Get"),
			"/tmf-api/serviceCatalogManagement/v4/serviceSpecification/{id}",
			c.RetrieveServiceSpecification,
		},
	}
}

// CreateServiceSpecification - Creates a ServiceSpecification
func (c *ServiceSpecificationApiController) CreateServiceSpecification(w http.ResponseWriter, r *http.Request) {
	serviceSpecificationParam := ServiceSpecificationCreate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&serviceSpecificationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceSpecificationCreateRequired(serviceSpecificationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateServiceSpecification(r.Context(), serviceSpecificationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteServiceSpecification - Deletes a ServiceSpecification
func (c *ServiceSpecificationApiController) DeleteServiceSpecification(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	
	result, err := c.service.DeleteServiceSpecification(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListServiceSpecification - List or find ServiceSpecification objects
func (c *ServiceSpecificationApiController) ListServiceSpecification(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	fieldsParam := query.Get("fields")
	offsetParam, err := parseInt32Parameter(query.Get("offset"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	limitParam, err := parseInt32Parameter(query.Get("limit"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListServiceSpecification(r.Context(), fieldsParam, offsetParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PatchServiceSpecification - Updates partially a ServiceSpecification
func (c *ServiceSpecificationApiController) PatchServiceSpecification(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	
	serviceSpecificationParam := ServiceSpecificationUpdate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&serviceSpecificationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceSpecificationUpdateRequired(serviceSpecificationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PatchServiceSpecification(r.Context(), idParam, serviceSpecificationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RetrieveServiceSpecification - Retrieves a ServiceSpecification by ID
func (c *ServiceSpecificationApiController) RetrieveServiceSpecification(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	
	fieldsParam := query.Get("fields")
	result, err := c.service.RetrieveServiceSpecification(r.Context(), idParam, fieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
