/*
 * Service Catalog Management
 *
 * ## TMF API Reference: TMF633 - Service Catalog Management   Version 4.0   The Service Catalog API is one of Catalog Management API Family. Service Catalog API goal is to provide a catalog of services.  Service Catalog API performs the following operations on the resource : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity (for administration purposes) - Manage notification of events. .  Copyright Â© TM Forum 2020. All Rights Reserved. 
 *
 * API version: 4.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package tmf633

// FeatureSpecification - Specification for resource, service or product features
type FeatureSpecification struct {

	// Identifier of the feature specification. Must be locally unique within the containing specification, thus allowing direct access to the feature spec.
	Id string `json:"id,omitempty"`

	// A flag indicating if this is a feature group (true) or not (false)
	IsBundle bool `json:"isBundle,omitempty"`

	// A flag indicating if the feature is enabled (true) or not (false)
	IsEnabled bool `json:"isEnabled,omitempty"`

	// Unique name given to the feature specification
	Name string `json:"name,omitempty"`

	// Version of the feature specification
	Version string `json:"version,omitempty"`

	// This is a list of feature constraints
	Constraint []ConstraintRef `json:"constraint,omitempty"`

	// This is a list of characteristics for a particular feature
	FeatureSpecCharacteristic []FeatureSpecificationCharacteristic `json:"featureSpecCharacteristic,omitempty"`

	// A dependency, exclusivity or aggratation relationship between/among feature specifications.
	FeatureSpecRelationship []FeatureSpecificationRelationship `json:"featureSpecRelationship,omitempty"`

	ValidFor TimePeriod `json:"validFor,omitempty"`
}

// AssertFeatureSpecificationRequired checks if the required fields are not zero-ed
func AssertFeatureSpecificationRequired(obj FeatureSpecification) error {
	for _, el := range obj.Constraint {
		if err := AssertConstraintRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.FeatureSpecCharacteristic {
		if err := AssertFeatureSpecificationCharacteristicRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.FeatureSpecRelationship {
		if err := AssertFeatureSpecificationRelationshipRequired(el); err != nil {
			return err
		}
	}
	if err := AssertTimePeriodRequired(obj.ValidFor); err != nil {
		return err
	}
	return nil
}

// AssertRecurseFeatureSpecificationRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of FeatureSpecification (e.g. [][]FeatureSpecification), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseFeatureSpecificationRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aFeatureSpecification, ok := obj.(FeatureSpecification)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertFeatureSpecificationRequired(aFeatureSpecification)
	})
}
