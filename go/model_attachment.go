/*
 * Service Catalog Management
 *
 * ## TMF API Reference: TMF633 - Service Catalog Management   Version 4.0   The Service Catalog API is one of Catalog Management API Family. Service Catalog API goal is to provide a catalog of services.  Service Catalog API performs the following operations on the resource : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity (for administration purposes) - Manage notification of events. .  Copyright Â© TM Forum 2020. All Rights Reserved. 
 *
 * API version: 4.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package tmf633

// Attachment - Complements the description of an element (for instance a product) through video, pictures...
type Attachment struct {

	// Unique identifier for this particular attachment
	Id string `json:"id,omitempty"`

	// URI for this Attachment
	Href string `json:"href,omitempty"`

	// Attachment type such as video, picture
	AttachmentType string `json:"attachmentType,omitempty"`

	// The actual contents of the attachment object, if embedded, encoded as base64
	Content string `json:"content,omitempty"`

	// A narrative text describing the content of the attachment
	Description string `json:"description,omitempty"`

	// Attachment mime type such as extension file for video, picture and document
	MimeType string `json:"mimeType,omitempty"`

	// The name of the attachment
	Name string `json:"name,omitempty"`

	// Uniform Resource Locator, is a web page address (a subset of URI)
	Url string `json:"url,omitempty"`

	Size Quantity `json:"size,omitempty"`

	ValidFor TimePeriod `json:"validFor,omitempty"`
}

// AssertAttachmentRequired checks if the required fields are not zero-ed
func AssertAttachmentRequired(obj Attachment) error {
	if err := AssertQuantityRequired(obj.Size); err != nil {
		return err
	}
	if err := AssertTimePeriodRequired(obj.ValidFor); err != nil {
		return err
	}
	return nil
}

// AssertRecurseAttachmentRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Attachment (e.g. [][]Attachment), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseAttachmentRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAttachment, ok := obj.(Attachment)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertAttachmentRequired(aAttachment)
	})
}
