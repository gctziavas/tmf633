/*
 * Service Catalog Management
 *
 * ## TMF API Reference: TMF633 - Service Catalog Management   Version 4.0   The Service Catalog API is one of Catalog Management API Family. Service Catalog API goal is to provide a catalog of services.  Service Catalog API performs the following operations on the resource : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity (for administration purposes) - Manage notification of events. .  Copyright Â© TM Forum 2020. All Rights Reserved. 
 *
 * API version: 4.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package tmf633

// CharacteristicValueSpecification - specification of a value (number or text or an object) that can be assigned to a Characteristic.
type CharacteristicValueSpecification struct {

	// If true, the Boolean Indicates if the value is the default value for a characteristic
	IsDefault bool `json:"isDefault,omitempty"`

	// An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\".
	RangeInterval string `json:"rangeInterval,omitempty"`

	// A regular expression constraint for given value
	Regex string `json:"regex,omitempty"`

	// A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot.
	UnitOfMeasure string `json:"unitOfMeasure,omitempty"`

	// The low range value that a characteristic can take on
	ValueFrom int32 `json:"valueFrom,omitempty"`

	// The upper range value that a characteristic can take on
	ValueTo int32 `json:"valueTo,omitempty"`

	// A kind of value that the characteristic value can take on, such as numeric, text and so forth
	ValueType string `json:"valueType,omitempty"`

	ValidFor TimePeriod `json:"validFor,omitempty"`

	Value map[string]interface{} `json:"value,omitempty"`

	// When sub-classing, this defines the super-class
	BaseType string `json:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation string `json:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class Extensible name
	Type string `json:"@type,omitempty"`
}

// AssertCharacteristicValueSpecificationRequired checks if the required fields are not zero-ed
func AssertCharacteristicValueSpecificationRequired(obj CharacteristicValueSpecification) error {
	if err := AssertTimePeriodRequired(obj.ValidFor); err != nil {
		return err
	}
	return nil
}

// AssertRecurseCharacteristicValueSpecificationRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of CharacteristicValueSpecification (e.g. [][]CharacteristicValueSpecification), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseCharacteristicValueSpecificationRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aCharacteristicValueSpecification, ok := obj.(CharacteristicValueSpecification)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertCharacteristicValueSpecificationRequired(aCharacteristicValueSpecification)
	})
}
