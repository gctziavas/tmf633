/*
 * Service Catalog Management
 *
 * ## TMF API Reference: TMF633 - Service Catalog Management   Version 4.0   The Service Catalog API is one of Catalog Management API Family. Service Catalog API goal is to provide a catalog of services.  Service Catalog API performs the following operations on the resource : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity (for administration purposes) - Manage notification of events. .  Copyright Â© TM Forum 2020. All Rights Reserved. 
 *
 * API version: 4.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package tmf633

// CharacteristicSpecificationRelationship - An aggregation, migration, substitution, dependency or exclusivity relationship between/among Characteristic specifications. The specification characteristic is embedded within the specification whose ID and href are in this entity, and identified by its ID.
type CharacteristicSpecificationRelationship struct {

	// Unique identifier of the characteristic within the specification
	CharacteristicSpecificationId string `json:"characteristicSpecificationId,omitempty"`

	// Name of the target characteristic within the specification
	Name string `json:"name,omitempty"`

	// Hyperlink reference to the parent specification containing the target characteristic
	ParentSpecificationHref string `json:"parentSpecificationHref,omitempty"`

	// Unique identifier of the parent specification containing the target characteristic
	ParentSpecificationId string `json:"parentSpecificationId,omitempty"`

	// Type of relationship such as aggregation, migration, substitution, dependency, exclusivity
	RelationshipType string `json:"relationshipType,omitempty"`

	ValidFor TimePeriod `json:"validFor,omitempty"`
}

// AssertCharacteristicSpecificationRelationshipRequired checks if the required fields are not zero-ed
func AssertCharacteristicSpecificationRelationshipRequired(obj CharacteristicSpecificationRelationship) error {
	if err := AssertTimePeriodRequired(obj.ValidFor); err != nil {
		return err
	}
	return nil
}

// AssertRecurseCharacteristicSpecificationRelationshipRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of CharacteristicSpecificationRelationship (e.g. [][]CharacteristicSpecificationRelationship), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseCharacteristicSpecificationRelationshipRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aCharacteristicSpecificationRelationship, ok := obj.(CharacteristicSpecificationRelationship)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertCharacteristicSpecificationRelationshipRequired(aCharacteristicSpecificationRelationship)
	})
}
