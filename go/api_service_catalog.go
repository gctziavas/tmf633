/*
 * Service Catalog Management
 *
 * ## TMF API Reference: TMF633 - Service Catalog Management   Version 4.0   The Service Catalog API is one of Catalog Management API Family. Service Catalog API goal is to provide a catalog of services.  Service Catalog API performs the following operations on the resource : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity (for administration purposes) - Manage notification of events. .  Copyright Â© TM Forum 2020. All Rights Reserved.
 *
 * API version: 4.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package tmf633

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ServiceCatalogApiController binds http requests to an api service and writes the service results to the http response
type ServiceCatalogApiController struct {
	service      ServiceCatalogApiServicer
	errorHandler ErrorHandler
}

// ServiceCatalogApiOption for how the controller is set up.
type ServiceCatalogApiOption func(*ServiceCatalogApiController)

// WithServiceCatalogApiErrorHandler inject ErrorHandler into controller
func WithServiceCatalogApiErrorHandler(h ErrorHandler) ServiceCatalogApiOption {
	return func(c *ServiceCatalogApiController) {
		c.errorHandler = h
	}
}

// NewServiceCatalogApiController creates a default api controller
func NewServiceCatalogApiController(s ServiceCatalogApiServicer, opts ...ServiceCatalogApiOption) Router {
	controller := &ServiceCatalogApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ServiceCatalogApiController
func (c *ServiceCatalogApiController) Routes() Routes {
	return Routes{
		{
			"CreateServiceCatalog",
			strings.ToUpper("Post"),
			"/tmf-api/serviceCatalogManagement/v4/serviceCatalog",
			c.CreateServiceCatalog,
		},
		{
			"DeleteServiceCatalog",
			strings.ToUpper("Delete"),
			"/tmf-api/serviceCatalogManagement/v4/serviceCatalog/{id}",
			c.DeleteServiceCatalog,
		},
		{
			"ListServiceCatalog",
			strings.ToUpper("Get"),
			"/tmf-api/serviceCatalogManagement/v4/serviceCatalog",
			c.ListServiceCatalog,
		},
		{
			"PatchServiceCatalog",
			strings.ToUpper("Patch"),
			"/tmf-api/serviceCatalogManagement/v4/serviceCatalog/{id}",
			c.PatchServiceCatalog,
		},
		{
			"RetrieveServiceCatalog",
			strings.ToUpper("Get"),
			"/tmf-api/serviceCatalogManagement/v4/serviceCatalog/{id}",
			c.RetrieveServiceCatalog,
		},
	}
}

// CreateServiceCatalog - Creates a ServiceCatalog
func (c *ServiceCatalogApiController) CreateServiceCatalog(w http.ResponseWriter, r *http.Request) {
	serviceCatalogParam := ServiceCatalog{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&serviceCatalogParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceCatalogRequired(serviceCatalogParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateServiceCatalog(r.Context(), serviceCatalogParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteServiceCatalog - Deletes a ServiceCatalog
func (c *ServiceCatalogApiController) DeleteServiceCatalog(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]

	result, err := c.service.DeleteServiceCatalog(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListServiceCatalog - List or find ServiceCatalog objects
func (c *ServiceCatalogApiController) ListServiceCatalog(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	fieldsParam := query.Get("fields")
	offsetParam, err := parseInt32Parameter(query.Get("offset"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	limitParam, err := parseInt32Parameter(query.Get("limit"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListServiceCatalog(r.Context(), fieldsParam, offsetParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PatchServiceCatalog - Updates partially a ServiceCatalog
func (c *ServiceCatalogApiController) PatchServiceCatalog(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]

	serviceCatalogParam := ServiceCatalogUpdate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&serviceCatalogParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceCatalogUpdateRequired(serviceCatalogParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PatchServiceCatalog(r.Context(), idParam, serviceCatalogParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RetrieveServiceCatalog - Retrieves a ServiceCatalog by ID
func (c *ServiceCatalogApiController) RetrieveServiceCatalog(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]

	fieldsParam := query.Get("fields")
	result, err := c.service.RetrieveServiceCatalog(r.Context(), idParam, fieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
