/*
 * Service Catalog Management
 *
 * ## TMF API Reference: TMF633 - Service Catalog Management   Version 4.0   The Service Catalog API is one of Catalog Management API Family. Service Catalog API goal is to provide a catalog of services.  Service Catalog API performs the following operations on the resource : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity (for administration purposes) - Manage notification of events. .  Copyright Â© TM Forum 2020. All Rights Reserved. 
 *
 * API version: 4.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package tmf633

// FeatureSpecificationRelationship - Relationship between feature specifications
type FeatureSpecificationRelationship struct {

	// Unique identifier of the target feature specification.
	FeatureId string `json:"featureId,omitempty"`

	// This is the name of the target feature specification.
	Name string `json:"name"`

	// Hyperlink reference to the parent specification containing the target feature
	ParentSpecificationHref string `json:"parentSpecificationHref,omitempty"`

	// Unique identifier of the parent specification containing the target feature
	ParentSpecificationId string `json:"parentSpecificationId,omitempty"`

	// This is the type of the feature specification relationship.
	RelationshipType string `json:"relationshipType"`

	ValidFor TimePeriod `json:"validFor,omitempty"`
}

// AssertFeatureSpecificationRelationshipRequired checks if the required fields are not zero-ed
func AssertFeatureSpecificationRelationshipRequired(obj FeatureSpecificationRelationship) error {
	elements := map[string]interface{}{
		"name": obj.Name,
		"relationshipType": obj.RelationshipType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertTimePeriodRequired(obj.ValidFor); err != nil {
		return err
	}
	return nil
}

// AssertRecurseFeatureSpecificationRelationshipRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of FeatureSpecificationRelationship (e.g. [][]FeatureSpecificationRelationship), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseFeatureSpecificationRelationshipRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aFeatureSpecificationRelationship, ok := obj.(FeatureSpecificationRelationship)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertFeatureSpecificationRelationshipRequired(aFeatureSpecificationRelationship)
	})
}
