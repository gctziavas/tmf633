/*
 * Service Catalog Management
 *
 * ## TMF API Reference: TMF633 - Service Catalog Management   Version 4.0   The Service Catalog API is one of Catalog Management API Family. Service Catalog API goal is to provide a catalog of services.  Service Catalog API performs the following operations on the resource : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity (for administration purposes) - Manage notification of events. .  Copyright Â© TM Forum 2020. All Rights Reserved. 
 *
 * API version: 4.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package tmf633

// FeatureSpecificationCharacteristicRelationship - An aggregation, migration, substitution, dependency or exclusivity relationship between/among FeatureSpecificationCharacteristics.
type FeatureSpecificationCharacteristicRelationship struct {

	// Unique identifier of the characteristic within the the target feature specification
	CharacteristicId string `json:"characteristicId,omitempty"`

	// Unique identifier of the target feature specification within the resource specification.
	FeatureId string `json:"featureId,omitempty"`

	// Name of the target characteristic
	Name string `json:"name,omitempty"`

	// Type of relationship such as aggregation, migration, substitution, dependency, exclusivity
	RelationshipType string `json:"relationshipType,omitempty"`

	// Hyperlink reference to the resource specification containing the target feature and feature characteristic
	ResourceSpecificationHref string `json:"resourceSpecificationHref,omitempty"`

	// Unique identifier of the resource specification containing the target feature and feature characteristic
	ResourceSpecificationId string `json:"resourceSpecificationId,omitempty"`

	ValidFor TimePeriod `json:"validFor,omitempty"`
}

// AssertFeatureSpecificationCharacteristicRelationshipRequired checks if the required fields are not zero-ed
func AssertFeatureSpecificationCharacteristicRelationshipRequired(obj FeatureSpecificationCharacteristicRelationship) error {
	if err := AssertTimePeriodRequired(obj.ValidFor); err != nil {
		return err
	}
	return nil
}

// AssertRecurseFeatureSpecificationCharacteristicRelationshipRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of FeatureSpecificationCharacteristicRelationship (e.g. [][]FeatureSpecificationCharacteristicRelationship), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseFeatureSpecificationCharacteristicRelationshipRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aFeatureSpecificationCharacteristicRelationship, ok := obj.(FeatureSpecificationCharacteristicRelationship)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertFeatureSpecificationCharacteristicRelationshipRequired(aFeatureSpecificationCharacteristicRelationship)
	})
}
