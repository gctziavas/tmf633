/*
 * Service Catalog Management
 *
 * ## TMF API Reference: TMF633 - Service Catalog Management   Version 4.0   The Service Catalog API is one of Catalog Management API Family. Service Catalog API goal is to provide a catalog of services.  Service Catalog API performs the following operations on the resource : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity (for administration purposes) - Manage notification of events. .  Copyright Â© TM Forum 2020. All Rights Reserved. 
 *
 * API version: 4.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package tmf633

import (
	"time"
)

// ImportJobCreate - Represents a task used to import resources from a file Skipped properties: id,href
type ImportJobCreate struct {

	// Date at which the job was completed
	CompletionDate time.Time `json:"completionDate,omitempty"`

	// Indicates the format of the imported data
	ContentType string `json:"contentType,omitempty"`

	// Date at which the job was created
	CreationDate time.Time `json:"creationDate,omitempty"`

	// Reason for failure if status is failed
	ErrorLog string `json:"errorLog,omitempty"`

	// URL of the root resource where the content of the file specified by the import job must be applied
	Path string `json:"path,omitempty"`

	// URL of the file containing the data to be imported
	Url string `json:"url"`

	Status JobStateType `json:"status,omitempty"`
}

// AssertImportJobCreateRequired checks if the required fields are not zero-ed
func AssertImportJobCreateRequired(obj ImportJobCreate) error {
	elements := map[string]interface{}{
		"url": obj.Url,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseImportJobCreateRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ImportJobCreate (e.g. [][]ImportJobCreate), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseImportJobCreateRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aImportJobCreate, ok := obj.(ImportJobCreate)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertImportJobCreateRequired(aImportJobCreate)
	})
}
