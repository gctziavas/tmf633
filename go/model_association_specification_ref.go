/*
 * Service Catalog Management
 *
 * ## TMF API Reference: TMF633 - Service Catalog Management   Version 4.0   The Service Catalog API is one of Catalog Management API Family. Service Catalog API goal is to provide a catalog of services.  Service Catalog API performs the following operations on the resource : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity (for administration purposes) - Manage notification of events. .  Copyright Â© TM Forum 2020. All Rights Reserved. 
 *
 * API version: 4.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package tmf633

// AssociationSpecificationRef - reference to an AssociationSpecification object
type AssociationSpecificationRef struct {

	// unique identifier
	Id string `json:"id"`

	// Hyperlink reference
	Href string `json:"href,omitempty"`

	// Name of the related entity.
	Name string `json:"name,omitempty"`

	// When sub-classing, this defines the super-class
	BaseType string `json:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation string `json:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class Extensible name
	Type string `json:"@type,omitempty"`

	// The actual type of the target instance when needed for disambiguation.
	ReferredType string `json:"@referredType,omitempty"`
}

// AssertAssociationSpecificationRefRequired checks if the required fields are not zero-ed
func AssertAssociationSpecificationRefRequired(obj AssociationSpecificationRef) error {
	elements := map[string]interface{}{
		"id": obj.Id,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseAssociationSpecificationRefRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of AssociationSpecificationRef (e.g. [][]AssociationSpecificationRef), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseAssociationSpecificationRefRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAssociationSpecificationRef, ok := obj.(AssociationSpecificationRef)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertAssociationSpecificationRefRequired(aAssociationSpecificationRef)
	})
}
