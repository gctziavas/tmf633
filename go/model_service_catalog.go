/*
 * Service Catalog Management
 *
 * ## TMF API Reference: TMF633 - Service Catalog Management   Version 4.0   The Service Catalog API is one of Catalog Management API Family. Service Catalog API goal is to provide a catalog of services.  Service Catalog API performs the following operations on the resource : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity (for administration purposes) - Manage notification of events. .  Copyright Â© TM Forum 2020. All Rights Reserved.
 *
 * API version: 4.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package tmf633

import (
	"time"

	"github.com/go-openapi/swag"
)

// ServiceCatalog - The root entity for service catalog management. A service catalog is a group of service specifications made available through service candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers).  A service catalog typically includes name, description and time period that is valid for. It will have a list of ServiceCandidate catalog items. A ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog. A ServiceCandidate and its associated ServiceSpecification may be \"published\" - made visible -in any number of ServiceCatalogs, or in none.
type ServiceCatalog struct {

	// unique identifier
	Id string `json:"id,omitempty"`

	// Hyperlink reference
	Href string `json:"href,omitempty"`

	// Description of this catalog
	Description string `json:"description,omitempty"`

	// Date and time of the last update
	LastUpdate time.Time `json:"lastUpdate,omitempty"`

	// Used to indicate the current lifecycle status
	LifecycleStatus string `json:"lifecycleStatus,omitempty"`

	// Name of the service catalog
	Name string `json:"name,omitempty"`

	// ServiceCatalog version
	Version string `json:"version,omitempty"`

	// List of service categories associated with this catalog
	Category []ServiceCategoryRef `json:"category,omitempty"`

	// List of parties or party roles related to this category
	RelatedParty []RelatedParty `json:"relatedParty,omitempty"`

	ValidFor TimePeriod `json:"validFor,omitempty"`

	// When sub-classing, this defines the super-class
	BaseType string `json:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation string `json:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class Extensible name
	Type string `json:"@type,omitempty"`
}

// AssertServiceCatalogRequired checks if the required fields are not zero-ed
func AssertServiceCatalogRequired(obj ServiceCatalog) error {
	for _, el := range obj.Category {
		if err := AssertServiceCategoryRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RelatedParty {
		if err := AssertRelatedPartyRequired(el); err != nil {
			return err
		}
	}
	if err := AssertTimePeriodRequired(obj.ValidFor); err != nil {
		return err
	}
	return nil
}

// AssertRecurseServiceCatalogRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ServiceCatalog (e.g. [][]ServiceCatalog), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseServiceCatalogRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aServiceCatalog, ok := obj.(ServiceCatalog)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertServiceCatalogRequired(aServiceCatalog)
	})
}

// MarshalBinary interface implementation
func (m *ServiceCatalog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceCatalog) UnmarshalBinary(b []byte) error {
	var res ServiceCatalog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
